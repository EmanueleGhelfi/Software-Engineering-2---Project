#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Other problem
\end_layout

\begin_layout Subsection
Return statements
\end_layout

\begin_layout Standard
A possible problem may be that the invoke method should return a result
 code that specifies the result of the event.
 The invoke method of this class always returns a null string.
 This could be a problem if the caller method performs some operations on
 that string.
 This object should reflect the event result and such a string doesn't say
 nothing.
\end_layout

\begin_layout Standard
While occasionally useful, this construct may make the code more prone to
 failing with a NullPointerException, and often indicates that the developer
 doesn't really understand the class' intended semantics.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 if (wsdl != null) {
\end_layout

\begin_layout Plain Layout

                    try {
\end_layout

\begin_layout Plain Layout

                        OutputStream os = response.getOutputStream();
\end_layout

\begin_layout Plain Layout

                        response.setContentType("text/xml");
\end_layout

\begin_layout Plain Layout

                        UtilXml.writeXmlDocument(os, wsdl);
\end_layout

\begin_layout Plain Layout

                        response.flushBuffer();
\end_layout

\begin_layout Plain Layout

                    } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

                        throw new EventHandlerException(e);
\end_layout

\begin_layout Plain Layout

                    }
\end_layout

\begin_layout Plain Layout

                    return null;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is only an example, at line 106.
\end_layout

\begin_layout Subsection
Error Handling
\end_layout

\begin_layout Subsubsection*
Nested try statements
\end_layout

\begin_layout Standard
Nested try statements may result in confusing code, and should probably
 have their catch and finally sections merged.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

            SOAPBody reqBody = reqEnv.getBody();
\end_layout

\begin_layout Plain Layout

            validateSOAPBody(reqBody);
\end_layout

\begin_layout Plain Layout

            OMElement serviceElement = reqBody.getFirstElement();
\end_layout

\begin_layout Plain Layout

            serviceName = serviceElement.getLocalName();
\end_layout

\begin_layout Plain Layout

            Map<String, Object> parameters = UtilGenerics.cast(SoapSerializer.dese
rialize(serviceElement.toString(), delegator));
\end_layout

\begin_layout Plain Layout

            try {
\end_layout

\begin_layout Plain Layout

                // verify the service is exported for remote execution and
 invoke it
\end_layout

\begin_layout Plain Layout

                ModelService model = dispatcher.getDispatchContext().getModelServi
ce(serviceName);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                if (model == null) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Problem processing the service",
 serviceName);
\end_layout

\begin_layout Plain Layout

                    Debug.logError("Could not find Service [" + serviceName
 + "].", module);
\end_layout

\begin_layout Plain Layout

                    return null;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                if (!model.export) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Problem processing the service",
 serviceName);
\end_layout

\begin_layout Plain Layout

                    Debug.logError("Trying to call Service [" + serviceName
 + "] that is not exported.", module);
\end_layout

\begin_layout Plain Layout

                    return null;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                Map<String, Object> serviceResults = dispatcher.runSync(serviceNa
me, parameters);
\end_layout

\begin_layout Plain Layout

                Debug.logVerbose("[EventHandler] : Service invoked", module);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                createAndSendSOAPResponse(serviceResults, serviceName, response)
;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            } catch (GenericServiceException e) {
\end_layout

\begin_layout Plain Layout

                if (UtilProperties.getPropertyAsBoolean("service", "secureSoapAns
wer", true)) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Problem processing the service,
 check your parameters.", serviceName);
\end_layout

\begin_layout Plain Layout

                } else {
\end_layout

\begin_layout Plain Layout

                    if(e.getMessageList() == null) {
\end_layout

\begin_layout Plain Layout

                        sendError(response, e.getMessage(), serviceName);
\end_layout

\begin_layout Plain Layout

                    } else {
\end_layout

\begin_layout Plain Layout

                        sendError(response, e.getMessageList(), serviceName);
\end_layout

\begin_layout Plain Layout

                    }
\end_layout

\begin_layout Plain Layout

                    Debug.logError(e, module);
\end_layout

\begin_layout Plain Layout

                    return null;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

            sendError(response, e.getMessage(), serviceName);
\end_layout

\begin_layout Plain Layout

            Debug.logError(e, module);
\end_layout

\begin_layout Plain Layout

            return null;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 175.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 try {
\end_layout

\begin_layout Plain Layout

        // setup the response
\end_layout

\begin_layout Plain Layout

            Debug.logVerbose("[EventHandler] : Setting up response message",
 module);
\end_layout

\begin_layout Plain Layout

            String xmlResults = SoapSerializer.serialize(serviceResults);
\end_layout

\begin_layout Plain Layout

            //Debug.logInfo("xmlResults ==================" + xmlResults,
 module);
\end_layout

\begin_layout Plain Layout

            XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStream
Reader(new StringReader(xmlResults));
\end_layout

\begin_layout Plain Layout

            StAXOMBuilder resultsBuilder = (StAXOMBuilder) OMXMLBuilderFactory.cr
eateStAXOMBuilder(OMAbstractFactory.getOMFactory(), reader);
\end_layout

\begin_layout Plain Layout

            OMElement resultSer = resultsBuilder.getDocumentElement();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // create the response soap
\end_layout

\begin_layout Plain Layout

            SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
\end_layout

\begin_layout Plain Layout

            SOAPEnvelope resEnv = factory.createSOAPEnvelope();
\end_layout

\begin_layout Plain Layout

            SOAPBody resBody = factory.createSOAPBody();
\end_layout

\begin_layout Plain Layout

            OMElement resService = factory.createOMElement(new QName(serviceName
 + "Response"));
\end_layout

\begin_layout Plain Layout

            resService.addChild(resultSer.getFirstElement());
\end_layout

\begin_layout Plain Layout

            resBody.addChild(resService);
\end_layout

\begin_layout Plain Layout

            resEnv.addChild(resBody);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // The declareDefaultNamespace method doesn't work see (https://issu
es.apache.org/jira/browse/AXIS2-3156)
\end_layout

\begin_layout Plain Layout

            // so the following doesn't work:
\end_layout

\begin_layout Plain Layout

            // resService.declareDefaultNamespace(ModelService.TNS);
\end_layout

\begin_layout Plain Layout

            // instead, create the xmlns attribute directly:
\end_layout

\begin_layout Plain Layout

            OMAttribute defaultNS = factory.createOMAttribute("xmlns", null,
 ModelService.TNS);
\end_layout

\begin_layout Plain Layout

            resService.addAttribute(defaultNS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // log the response message
\end_layout

\begin_layout Plain Layout

            if (Debug.verboseOn()) {
\end_layout

\begin_layout Plain Layout

                try {
\end_layout

\begin_layout Plain Layout

                    Debug.logInfo("Response Message:
\backslash
n" + resEnv + "
\backslash
n", module);
\end_layout

\begin_layout Plain Layout

                } catch (Throwable t) {
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            resEnv.serialize(response.getOutputStream());
\end_layout

\begin_layout Plain Layout

            response.getOutputStream().flush();
\end_layout

\begin_layout Plain Layout

        } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

            Debug.logError(e, module);
\end_layout

\begin_layout Plain Layout

            throw new EventHandlerException(e.getMessage(), e);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 239.
\end_layout

\begin_layout Subsubsection*
Throw inside catch block that ignores the caught exception
\end_layout

\begin_layout Standard
It is considered good practice when throwing an exception in response to
 an exception to wrap the initial exception, so that valuable context informatio
n such as stack frames and line numbers are not lost.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Unable to obtain WSDL", null);
\end_layout

\begin_layout Plain Layout

                    throw new EventHandlerException("Unable to obtain WSDL");
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 143.
\end_layout

\begin_layout Subsubsection*
Overly broad catch block
\end_layout

\begin_layout Standard
Catch blocks which have parameters which are more generic than the exceptions
 thrown by the corresponding try block.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 try {
\end_layout

\begin_layout Plain Layout

                    Writer writer = response.getWriter();
\end_layout

\begin_layout Plain Layout

                    StringBuilder sb = new StringBuilder();
\end_layout

\begin_layout Plain Layout

                    sb.append("<html><head><title>OFBiz SOAP/1.1 Services</title><
/head>");
\end_layout

\begin_layout Plain Layout

                    sb.append("<body>No such service.").append("<p>Services:<ul>");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                    for (String scvName: dctx.getAllServiceNames()) {
\end_layout

\begin_layout Plain Layout

                        ModelService model = dctx.getModelService(scvName);
\end_layout

\begin_layout Plain Layout

                        if (model.export) {
\end_layout

\begin_layout Plain Layout

                            sb.append("<li><a href=
\backslash
"").append(locationUri).append("/").append(model.name).append("?wsdl
\backslash
">");
\end_layout

\begin_layout Plain Layout

                            sb.append(model.name).append("</a></li>");
\end_layout

\begin_layout Plain Layout

                        }
\end_layout

\begin_layout Plain Layout

                    }
\end_layout

\begin_layout Plain Layout

                    sb.append("</ul></p></body></html>");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                    writer.write(sb.toString());
\end_layout

\begin_layout Plain Layout

                    writer.flush();
\end_layout

\begin_layout Plain Layout

                    return null;
\end_layout

\begin_layout Plain Layout

                } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Unable to obtain WSDL", null);
\end_layout

\begin_layout Plain Layout

                    throw new EventHandlerException("Unable to obtain WSDL");
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 123.
 Catch of Exception is masking IOException and GenericServiceException.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 try {
\end_layout

\begin_layout Plain Layout

            InputStream inputStream = (InputStream) request.getInputStream();
\end_layout

\begin_layout Plain Layout

            SOAPModelBuilder builder = (SOAPModelBuilder) OMXMLBuilderFactory.cre
ateSOAPModelBuilder(inputStream, "UTF-8");
\end_layout

\begin_layout Plain Layout

            reqEnv = (SOAPEnvelope) builder.getDocumentElement();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // log the request message
\end_layout

\begin_layout Plain Layout

            if (Debug.verboseOn()) {
\end_layout

\begin_layout Plain Layout

                try {
\end_layout

\begin_layout Plain Layout

                    Debug.logInfo("Request Message:
\backslash
n" + reqEnv + "
\backslash
n", module);
\end_layout

\begin_layout Plain Layout

                } catch (Throwable t) {
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

            sendError(response, "Problem processing the service", null);
\end_layout

\begin_layout Plain Layout

            throw new EventHandlerException("Cannot get the envelope", e);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 155.
 Catch of Exception is masking IOException.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

  } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

            sendError(response, e.getMessage(), serviceName);
\end_layout

\begin_layout Plain Layout

            Debug.logError(e, module);
\end_layout

\begin_layout Plain Layout

            return null;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 215.
 Catch of Exception is masking exceptions OMException, EventHandlerException,
 SerializeException, SAXException, ParserConfigurationException and IOException.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

            Debug.logError(e, module);
\end_layout

\begin_layout Plain Layout

            throw new EventHandlerException(e.getMessage(), e);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 274.
 Catch of Exception is too broad, masking exceptions SerializeException,
 FileNotFoundException, IOException, XMLStreamException' and SOAPProcessingExcep
tion.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

} catch (Exception e) {
\end_layout

\begin_layout Plain Layout

throw new EventHandlerException(e.getMessage(), e);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 323.
 Catch of Exception is too broad, masking exceptions SerializeException,
 FileNotFoundException, IOException, XMLStreamException and SOAPProcessingExcept
ion.
\end_layout

\begin_layout Subsection
Performance Issues
\end_layout

\begin_layout Subsubsection*
String literals of length one
\end_layout

\begin_layout Standard
String literals of length one should not be used in concatenation.
 These literals may be replaced by equivalent character literals, gaining
 some performance enhancement.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 sb.append("<li><a href=
\backslash
"").append(locationUri).append("/").append(model.name).append("?wsdl
\backslash
">");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 132.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

  Debug.logInfo("Request Message:
\backslash
n" + reqEnv + "
\backslash
n", module);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 163.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

   uri.append(":");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 334.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 reqInfo = "/" + reqInfo;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 342.
\end_layout

\begin_layout Subsubsection*
String Buffer or String Builder without initial capacity
\end_layout

\begin_layout Standard
It's a bad practice to instantiate a new StringBuffer or StringBuilder object
 without specifying its initial capacity.
 If no initial capacity is specified, a default capacity is used, which
 will rarely be optimal.
 Failing to specify initial capacities for StringBuffers may result in performan
ce issues, if space needs to be reallocated and memory copied when capacity
 is exceeded.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

 Writer writer = response.getWriter();
\end_layout

\begin_layout Plain Layout

                    StringBuilder sb = new StringBuilder();
\end_layout

\begin_layout Plain Layout

                    sb.append("<html><head><title>OFBiz SOAP/1.1 Services</title><
/head>");
\end_layout

\begin_layout Plain Layout

                    sb.append("<body>No such service.").append("<p>Services:<ul>");
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 124.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

  StringBuilder uri = new StringBuilder();
\end_layout

\begin_layout Plain Layout

        uri.append(request.getScheme());
\end_layout

\begin_layout Plain Layout

        uri.append("://");
\end_layout

\begin_layout Plain Layout

        uri.append(request.getServerName());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At line 329.
\end_layout

\begin_layout Subsection
Method Metrics
\end_layout

\begin_layout Subsubsection*
Overly Complex Method
\end_layout

\begin_layout Standard
Cyclomatic complexity is basically a measurement of the number of branching
 points in a method.
 Methods with too high a cyclomatic complexity may be confusing and difficult
 to test.
 
\end_layout

\begin_layout Standard
In this class method invoke has a too high cyclomatic complexity.
 There are multiple if statements and 21 branching point.
 
\end_layout

\begin_layout Subsubsection*
Method with multiple return points
\end_layout

\begin_layout Standard
Methods with too many return points may be confusing, and hard to refactor.
 A return point is either a return statement or the falling through the
 bottom of a void method or constructor.
 
\end_layout

\begin_layout Standard
In this class the method invoke has 7 return points.
\end_layout

\begin_layout Subsection
Assignments Issues
\end_layout

\begin_layout Subsubsection*
Assignment to 'null'
\end_layout

\begin_layout Standard
The assignment of a variable to null, outside of declarations may be an
 issue.
 While occasionally useful for triggering garbage collection, this construct
 may make the code more prone to NullPointerExceptions, and often indicates
 that the developer doesn't really understand the class's intended semantics.
 
\end_layout

\begin_layout Standard
At line 95, in Invoke method there is the following assignment to null:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

if (serviceName != null) {
\end_layout

\begin_layout Plain Layout

                Document wsdl = null;
\end_layout

\begin_layout Plain Layout

                try {
\end_layout

\begin_layout Plain Layout

                    wsdl = dctx.getWSDL(serviceName, locationUri);
\end_layout

\begin_layout Plain Layout

                } catch (GenericServiceException e) {
\end_layout

\begin_layout Plain Layout

                    serviceName = null;
\end_layout

\begin_layout Plain Layout

                } catch (WSDLException e) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Unable to obtain WSDL", serviceName);
\end_layout

\begin_layout Plain Layout

                    throw new EventHandlerException("Unable to obtain WSDL",
 e);
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\end_inset

The variable serviceName is assigned to null in the catch clause.
 This could lead to NullPointerException.
\end_layout

\begin_layout Subsection
Bad use of Control Flow Statements
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},keywordstyle={\color{blue}}"
inline false
status open

\begin_layout Plain Layout

		if (serviceName != null) {
\end_layout

\begin_layout Plain Layout

                Document wsdl = null;
\end_layout

\begin_layout Plain Layout

                try {
\end_layout

\begin_layout Plain Layout

                    wsdl = dctx.getWSDL(serviceName, locationUri);
\end_layout

\begin_layout Plain Layout

                } catch (GenericServiceException e) {
\end_layout

\begin_layout Plain Layout

                    serviceName = null;
\end_layout

\begin_layout Plain Layout

                } catch (WSDLException e) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Unable to obtain WSDL", serviceName);
\end_layout

\begin_layout Plain Layout

                    throw new EventHandlerException("Unable to obtain WSDL",
 e);
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                if (wsdl != null) {
\end_layout

\begin_layout Plain Layout

                    try {
\end_layout

\begin_layout Plain Layout

                        OutputStream os = response.getOutputStream();
\end_layout

\begin_layout Plain Layout

                        response.setContentType("text/xml");
\end_layout

\begin_layout Plain Layout

                        UtilXml.writeXmlDocument(os, wsdl);
\end_layout

\begin_layout Plain Layout

                        response.flushBuffer();
\end_layout

\begin_layout Plain Layout

                    } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

                        throw new EventHandlerException(e);
\end_layout

\begin_layout Plain Layout

                    }
\end_layout

\begin_layout Plain Layout

                    return null;
\end_layout

\begin_layout Plain Layout

                } else {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Unable to obtain WSDL", serviceName);
\end_layout

\begin_layout Plain Layout

                    throw new EventHandlerException("Unable to obtain WSDL");
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (serviceName == null) {
\end_layout

\begin_layout Plain Layout

                try {
\end_layout

\begin_layout Plain Layout

                    Writer writer = response.getWriter();
\end_layout

\begin_layout Plain Layout

                    StringBuilder sb = new StringBuilder();
\end_layout

\begin_layout Plain Layout

                    sb.append("<html><head><title>OFBiz SOAP/1.1 Services</title><
/head>");
\end_layout

\begin_layout Plain Layout

                    sb.append("<body>No such service.").append("<p>Services:<ul>");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                    for (String scvName: dctx.getAllServiceNames()) {
\end_layout

\begin_layout Plain Layout

                        ModelService model = dctx.getModelService(scvName);
\end_layout

\begin_layout Plain Layout

                        if (model.export) {
\end_layout

\begin_layout Plain Layout

                            sb.append("<li><a href=
\backslash
"").append(locationUri).append("/").append(model.name).append("?wsdl
\backslash
">");
\end_layout

\begin_layout Plain Layout

                            sb.append(model.name).append("</a></li>");
\end_layout

\begin_layout Plain Layout

                        }
\end_layout

\begin_layout Plain Layout

                    }
\end_layout

\begin_layout Plain Layout

                    sb.append("</ul></p></body></html>");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                    writer.write(sb.toString());
\end_layout

\begin_layout Plain Layout

                    writer.flush();
\end_layout

\begin_layout Plain Layout

                    return null;
\end_layout

\begin_layout Plain Layout

                } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

                    sendError(response, "Unable to obtain WSDL", null);
\end_layout

\begin_layout Plain Layout

                    throw new EventHandlerException("Unable to obtain WSDL");
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of the use of the if-else construct, at line 95 there is the block
 that is executed if serviceName is not null and at line 122 there is the
 complementary condition into an if statement.
 This could be due to the assignment to null of serviceName at line 100.
 The second block could be a recovery procedure that has to be called if
 the exception is raised in the first block or if the service name is null
 at the beginning.
 In this way the control flow is difficult to understand.
 
\end_layout

\end_body
\end_document
