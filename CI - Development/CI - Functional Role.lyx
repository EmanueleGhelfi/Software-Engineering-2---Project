#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Functional role of the assigned class
\end_layout

\begin_layout Standard
SOAPEventHandler class is a class responsible for managing soap events.
 It's the implementation of the Event Handler interface.
 
\end_layout

\begin_layout Subsection
SOAP
\end_layout

\begin_layout Standard
Simple Object Access Protocol (SOAP) is a protocol for exchanging structured
 information in a decentralized, distributed environment.
 It is XML-based and consists of three parts:
\end_layout

\begin_layout Itemize
An envelope that defines a framework for describing what is in a message
 and how to process the message
\end_layout

\begin_layout Itemize
A set of encoding rules for expressing instances of application defined
 data types 
\end_layout

\begin_layout Itemize
A convention for representing remote procedure calls and responses
\end_layout

\begin_layout Standard
The use of XML allows client running on different operative systems and
 written in different languages to invoke services in the same way.
 
\end_layout

\begin_layout Standard
In fact they can ask for the WSDL (Web Service Description Language), that
 is a XML-based interface definition language, in order to obtain a list
 of the exposed web services and how to call them.
\end_layout

\begin_layout Standard
A WSDL document uses the following elements in the definition of network
 services:
\end_layout

\begin_layout Itemize
Types: a container for data type definitions using some type system (such
 as XSD).
\end_layout

\begin_layout Itemize
Message: an abstract, typed definition of the data being communicated.
 
\end_layout

\begin_layout Itemize
Operation: an abstract description of an action supported by the service.
\end_layout

\begin_layout Itemize
Port Type: an abstract set of operations supported by one or more endpoints.
\end_layout

\begin_layout Itemize
Binding: a concrete protocol and data format specification for a particular
 port type.
 
\end_layout

\begin_layout Itemize
Port: a single endpoint defined as a combination of a binding and a network
 address.
 
\end_layout

\begin_layout Itemize
Service: a collection of related endpoints.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Here it is an example of a SOAP request.
 In the SOAP message the GetCustomerInfo operation is requested.
 Note that only a fragment of the HTTP header is shown.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

POST /url HTTP/1.1
\end_layout

\begin_layout Plain Layout

Host: HostServerName
\end_layout

\begin_layout Plain Layout

Content-type: text/xml; charset=utf-8
\end_layout

\begin_layout Plain Layout

Content-length: 350
\end_layout

\begin_layout Plain Layout

SoapAction: http://tempUri.org/GetCustomerInfo
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<?xml version="1.0" encoding="utf-8" ?> 
\end_layout

\begin_layout Plain Layout

<soap:Envelope 
\end_layout

\begin_layout Plain Layout

    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
\end_layout

\begin_layout Plain Layout

    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
\end_layout

\begin_layout Plain Layout

    xmlns:xsd="http://www.w3.org/2001/XMLSchema">
\end_layout

\begin_layout Plain Layout

 <soap:Body>
\end_layout

\begin_layout Plain Layout

   <GetCustomerInfo xmlns="http://tempUri.org/">
\end_layout

\begin_layout Plain Layout

<CustomerID>1</CustomerID> 
\end_layout

\begin_layout Plain Layout

<OutputParam /> 
\end_layout

\begin_layout Plain Layout

  </GetCustomerInfo>
\end_layout

\begin_layout Plain Layout

</soap:Body>
\end_layout

\begin_layout Plain Layout

</soap:Envelope>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A SOAP response could look something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0"?>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<soap:Envelope
\end_layout

\begin_layout Plain Layout

xmlns:soap="http://www.w3.org/2003/05/soap-envelope/"
\end_layout

\begin_layout Plain Layout

soap:encodingStyle="http://www.w3.org/2003/05/soap-encoding">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<soap:Body>
\end_layout

\begin_layout Plain Layout

  <m:GetPriceResponse xmlns:m="http://www.w3schools.com/prices">
\end_layout

\begin_layout Plain Layout

    <m:Price>1.90</m:Price>
\end_layout

\begin_layout Plain Layout

  </m:GetPriceResponse>
\end_layout

\begin_layout Plain Layout

</soap:Body>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</soap:Envelope>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SOAPEventHandler
\end_layout

\begin_layout Standard
SOAPEvent handler takes in input a request, checks whether it is a WSDL
 request or a service request and process it the proper way.
\end_layout

\begin_layout Standard
If it is a WSDL request it answers with a description of the exposed services.
\end_layout

\begin_layout Standard
If it is a service request it calls the dispatcher with the service name
 and the parameters in the request.
 Then it receives the response from the dispatcher, builds a SOAP response
 for the client and sends it.
\end_layout

\begin_layout Standard
The functional role of the class has been understood by understanding the
 SOAP protocol and then looking at the code since the JavaDoc does not explain
 the specific handling of the SOAP request but only provides a general descripti
on of event handling.
\end_layout

\begin_layout Subsubsection*
Init Method
\end_layout

\begin_layout Standard
Initializes the handler.
\end_layout

\begin_layout Standard
ServletContext parameter may be needed by the handler in order to lookup
 properties or XML definition files for rendering pages or handler options.
\end_layout

\begin_layout Standard
In this class the context parameter is totally ignored but it's imposed
 by the init method of EventHandler interface.
\end_layout

\begin_layout Subsubsection*
Invoke Method
\end_layout

\begin_layout Standard
This method invokes the web event.
 
\end_layout

\begin_layout Standard
Parameter event contains information about what to execute.
\end_layout

\begin_layout Standard
Parameter requestMap contains information about the request-map the event
 was called from.
\end_layout

\begin_layout Standard
Parameter request is the servlet request object.
\end_layout

\begin_layout Standard
Parameter response is the servlet response object.
\end_layout

\begin_layout Standard
This method returns the result code of the event (i.e.
 if the event has been done in a proper way or if some error happened).
\end_layout

\begin_layout Standard
This method is the core of the class and it has been already explained before.
\end_layout

\end_body
\end_document
