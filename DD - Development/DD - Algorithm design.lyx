#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 15page%
\topmargin 10pheight%
\rightmargin 15page%
\bottommargin 10pheight%
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
In this section are described the most important algorithm of the software
 to be.
\begin_inset Newline newline
\end_inset

Algorithms are divided by component in order to disambiguate functions with
 the same name but executed by different component.
\begin_inset Newline newline
\end_inset

Algorithms are written in a sort of pseudocode to maintain an high level
 of abstraction and to make them more clear and readable.
 
\end_layout

\begin_layout Subsection
Search Engine Algorithms
\end_layout

\begin_layout Subsubsection*
Search Cars
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

// function of search engine
\end_layout

\begin_layout Plain Layout

// optionSearch is the option related to the search
\end_layout

\begin_layout Plain Layout

// userPosition in the current position of user
\end_layout

\begin_layout Plain Layout

Function searchCar(OptionSearch optionSearch, Position userPosition){
\end_layout

\begin_layout Plain Layout

    // list of cars to return
\end_layout

\begin_layout Plain Layout

    List toReturnCars;
\end_layout

\begin_layout Plain Layout

    // get max distance of car to user from optionSearch
\end_layout

\begin_layout Plain Layout

    var maxDistance = optionSearch.distance;
\end_layout

\begin_layout Plain Layout

    // get all cars from database
\end_layout

\begin_layout Plain Layout

    List cars = DB.getCars();
\end_layout

\begin_layout Plain Layout

    For Car car in cars {
\end_layout

\begin_layout Plain Layout

        var carPosition = CarProxy.getCarPosition(car.id);
\end_layout

\begin_layout Plain Layout

        var carToUser = calculateDistance(carPosition,userPosition);
\end_layout

\begin_layout Plain Layout

        // if distance is lower than selected distance, add car to toReturnCars
\end_layout

\begin_layout Plain Layout

        if(carToUser<maxDistance)
\end_layout

\begin_layout Plain Layout

            toReturnCars.add(car);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return toReturnCars;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ride Manager Algorithms
\end_layout

\begin_layout Subsubsection*
Calculate Cost
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

// function of ride manager
\end_layout

\begin_layout Plain Layout

Function calculateCost(Ride ride){
\end_layout

\begin_layout Plain Layout

    // calculate cost due to time
\end_layout

\begin_layout Plain Layout

    var timeCost = ride.duration*Constants.costPerMinute;
\end_layout

\begin_layout Plain Layout

    // get max discount from ride object
\end_layout

\begin_layout Plain Layout

    var discount = ride.maxDiscount;
\end_layout

\begin_layout Plain Layout

    // get fee related to ride
\end_layout

\begin_layout Plain Layout

    var fee = ride.fee;
\end_layout

\begin_layout Plain Layout

    // apply discount and fee to ride cost
\end_layout

\begin_layout Plain Layout

    var realCost = applyDiscountAndFee (timeCost,discount,fee);
\end_layout

\begin_layout Plain Layout

    // pass all to payment manager
\end_layout

\begin_layout Plain Layout

    PaymentManager.doPayment(realCost,ride.user);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Unlock Car
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

// function of ride manager
\end_layout

\begin_layout Plain Layout

Function unlockCar(User user, String carID, Position userPosition){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // get car position from carProxy
\end_layout

\begin_layout Plain Layout

    var carPosition = CarProxy.getCarPosition(carID);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    If car is not reserved by user
\end_layout

\begin_layout Plain Layout

        return Error
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    If carPosition and userPosition Are near
\end_layout

\begin_layout Plain Layout

        //create a new ride
\end_layout

\begin_layout Plain Layout

        ride = new Ride(carID,user);
\end_layout

\begin_layout Plain Layout

        ride.setState(CREATED);
\end_layout

\begin_layout Plain Layout

        // ask car proxy to unlock car
\end_layout

\begin_layout Plain Layout

        CarProxy.unlockCar(carID);
\end_layout

\begin_layout Plain Layout

        // register an observer to the car 
\end_layout

\begin_layout Plain Layout

        CarProxy.registerObserver(carID,new CarObserver());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Else return Error
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Car Observer Algorithms
\end_layout

\begin_layout Subsubsection*
Engine Start Callback
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

// callback of carobserver called by car when engine starts
\end_layout

\begin_layout Plain Layout

Function engineStartCallback(String carID){
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    ride = get ride related to car;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    //set started state to ride
\end_layout

\begin_layout Plain Layout

    ride.setState(STARTED);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Engine Stop Callback
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

//callback of carObserver called by car when engine stops
\end_layout

\begin_layout Plain Layout

Function engineStopCallback(String carID){
\end_layout

\begin_layout Plain Layout

    same as engineStart but set state STOPPED
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Reservation Manager Algorithms
\end_layout

\begin_layout Subsubsection*
Do Reservation
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

//function of reservation manager
\end_layout

\begin_layout Plain Layout

Function doReservation(User user, String carID, Hour hour, int passengers){
\end_layout

\begin_layout Plain Layout

    // if user has already some reservation can't reserve a car
\end_layout

\begin_layout Plain Layout

    If user.currentReservation>0 
\end_layout

\begin_layout Plain Layout

        return Error
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // if car is reserved or is busy return error
\end_layout

\begin_layout Plain Layout

    If car.isReserved or car.isBusy 
\end_layout

\begin_layout Plain Layout

        return Error
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // if user is suspended, it can't do a reservation
\end_layout

\begin_layout Plain Layout

    If user.isSuspended
\end_layout

\begin_layout Plain Layout

        return Error
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    //  users must be able to reserve a car for up to one hour before they
 pick it up.
\end_layout

\begin_layout Plain Layout

    If Time.currentHour+1>hour
\end_layout

\begin_layout Plain Layout

        return Error
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    user.reservedCar = car;
\end_layout

\begin_layout Plain Layout

    create new Reservation(car,user,hour,passengers);
\end_layout

\begin_layout Plain Layout

    update DB information;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Car Proxy
\end_layout

\begin_layout Subsubsection*
Get Car Status
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

// function of car proxy called by other components
\end_layout

\begin_layout Plain Layout

Function getCarStatus(String carID){
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    // get the time of last update from the db
\end_layout

\begin_layout Plain Layout

    lastStatusUpdate = get last update of car from DB;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // if the last update is sufficiently recenent return that status
\end_layout

\begin_layout Plain Layout

    // Cache function
\end_layout

\begin_layout Plain Layout

    If lastStatusUpdate is recent
\end_layout

\begin_layout Plain Layout

        return status from DB;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // if the last update is not recent the status could have changed so
 request status to the car
\end_layout

\begin_layout Plain Layout

    If lastStatusUpdate is not recent
\end_layout

\begin_layout Plain Layout

        get ip of the car;
\end_layout

\begin_layout Plain Layout

        create new status request to car;
\end_layout

\begin_layout Plain Layout

        wait car response;
\end_layout

\begin_layout Plain Layout

        status = car response;
\end_layout

\begin_layout Plain Layout

        return status;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Unlock Car
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,numberstyle={\scriptsize},breaklines=true,showstringspaces=false,morekeywords={one, sig, abstract, lone, set, ##, assert, pred, check, run, implies, iff, let, as, else, sum, univ, disj fun, iden, extends, open, no, none, fact, all, but, as, Int, in, or, For, Function, var, =, List},commentstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

// function of car proxy called by other components when they need to unlock
 a car
\end_layout

\begin_layout Plain Layout

Function unlockCar (String carId){
\end_layout

\begin_layout Plain Layout

    get ip of the car;
\end_layout

\begin_layout Plain Layout

    create a new unlock request to car;
\end_layout

\begin_layout Plain Layout

    wait car response;
\end_layout

\begin_layout Plain Layout

    return response;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
