#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Architectural design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Architectures/Arch Overview.png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
High level architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this section is presented an high level architecture.
 It shows how is structured the system and the main interaction between
 subsystems.
\begin_inset Newline newline
\end_inset

There is a WebServer with Nginx technology that serves static content (like
 .html, .js, .css) to browser.
 When WebServer receives certain API calls it acts as reverse proxy.
 Proxying is used to distribute load among several servers.
 When web server proxies a request, it send the request to the Application
 Server, fetches the response and sends back to the client.
 
\begin_inset Newline newline
\end_inset

Application server contains the business logic of the software to be and
 interacts with the Database Server and with the CarOS.
\begin_inset Newline newline
\end_inset

Mobile Application only makes API calls to WebServer and receives back the
 JSON response of Application Server.
\begin_inset Newline newline
\end_inset

This project starts as a monolithic application because of simplicity of
 development, but with particular attention to the modularization.
 So, in case will be the need of scaling, the refactoring to micro-services
 won't be difficult.
 
\end_layout

\begin_layout Subsection
High level components and their interaction
\end_layout

\begin_layout Standard
In this section are presented the high level component and it's described
 how they interact with each other.The client component is made of the Web
 Browser and the Mobile Application.
 Both communicates with the server through its interface.
\begin_inset Newline newline
\end_inset

The application server communicates with DBMS through DBMS API and with
 CarOS through it's API.
\begin_inset Newline newline
\end_inset

In this way the central system always knows the status (position, battery,
 etc.) of all cars and also cars can initiate a communication with server
 when they need to communicate important event.
 This is done with observer pattern as specified later in this document.
\begin_inset Newline newline
\end_inset

The communication between client and server can be synchronous or asynchronous
 depending on the kind of interaction.
 The server can communicate asynchronously with client with notification
 or messages (email).This is the class diagram of the data core (likely during
 the coding phase a more detailed data structure will come up).
 There are two important comsideration to do about this model: the first
 one is that the two relations user-reservation and user-ride will guarantee
 the reconstruction of users “story” in the use of the Power Enjoy service,
 and the second one related to a bit more technical solution about car system.
 In the car class there are some informations that in general shouldn’t
 be stored, like battery life and position, because they change rapidly.
 The explanation of this decision is in the component diagram description,
 in particular in the explanation of how the car proxy component works.
\end_layout

\begin_layout Subsection
High level component and their interaction
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Diagrams/High Level component.png
	lyxscale 70
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
High level component diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data model
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Diagrams/Model class diagram.png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Data class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the core of the data stored in the db.
 It is not complete, it contains only the more important information and
 it is possible that during the coding phase more structures will come up.
 There are two important considerations to do: the first one, is that the
 two relations User-Ride and User-Reservation lead to the construction of
 the whole story of a user, and the second one, more technical, is related
 to the Car class.
 This class contains some information that in general aren't stored in a
 database, because they change rapidly, like Position and battery life.
 This decision is motivated and explained in the description of the car
 proxy component, in the following section.
\end_layout

\begin_layout Subsection
Component view
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Diagrams/Component diagram (detailed).png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
More detailed component diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Car proxy component
\end_layout

\begin_layout Standard
Car proxy is the abstraction of cars in the server.
 It must be invoked by other internal subsystems that need information about
 cars physical status (real time informations), like position, battery life
 etc.
 This component absolutely doesn't care about information related to reservation
s or rides.
 
\begin_inset Newline newline
\end_inset

The main purpose of this component is to request cars using their API, but
 its implementations should also guarantee that the systems working on cars
 don't have to support high amount of parallel request.
 In order to do that, car proxy will use the database, storing a physical
 characteristic related to the timestamp of the API call that has provided
 that information.
 When a request arrives, car proxy decides which data should be provided:
 the one got through the API call to the car, or the one stored in the database.
 If the stored data are sufficiently recent then they can be provided, otherwise
 it is needed to make the request.
\begin_inset Newline newline
\end_inset

As it can be seen in the diagram, this component has a considerable fan-in,
 it could be necessary in future to make it scalable.
\end_layout

\begin_layout Subsubsection
Car monitoring component
\end_layout

\begin_layout Standard
This component is substantially a daemon.
 It periodically asks to the car proxy component the informations that operators
 need to do car maintenance.
 If a damage has been detected, the notification component should be called,
 in order to communicate it to an operator.
\end_layout

\begin_layout Subsubsection
Ride manager
\end_layout

\begin_layout Standard
Ride manager is the component that takes care abut the data in the server
 corresponding to rides in the real world.
 Furthermore, when a ride is set to pause, it use the car proxy component
 to lock or unlock the car.
 
\end_layout

\begin_layout Subsubsection
Reservation manager
\end_layout

\begin_layout Standard
This component manages users reservation request, setting the status of
 a car from available to reserved and vice versa.
 It should also take care about reservation expiration, resetting the car
 state from reserved to available, and taxing the user through the component
 payment manager.
\end_layout

\begin_layout Subsubsection
Registration manager
\end_layout

\begin_layout Standard
This component accepts request from guest of joining the Power Enjoy service.
 It checks if the guest has a valid drive license and adds it to the users.
 It also verifies the validity of the payment informations received by the
 guest using the services provided by the payment manager component.
\end_layout

\begin_layout Subsubsection
Profile manager
\end_layout

\begin_layout Standard
This component reply to users that want to see their past utilization of
 the power enjoy services.
\end_layout

\begin_layout Subsubsection
Customer messages handler
\end_layout

\begin_layout Standard
This component receives messages about users regarding malfunctions of cars,
 and use the notification manager to notify the operator that should take
 care about that.
\end_layout

\begin_layout Subsubsection
Authentication manager
\end_layout

\begin_layout Standard
The authentication manager the component that manages the login of user,
 operator, and administrator, and administrates session.
\end_layout

\begin_layout Subsubsection
Car search engine
\end_layout

\begin_layout Standard
This component interrogates the car proxy component and get cars position,
 performing the two type of car research.
\end_layout

\begin_layout Subsubsection
Car manager 
\end_layout

\begin_layout Standard
The car manager component can be used by operators to change car status
 in the server.
 For instance, if an operator is going to work on a car, it should use this
 component to switch the car status to 
\begin_inset Quotes eld
\end_inset

under maintenance
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Administrator functionality provider
\end_layout

\begin_layout Standard
This component provides the functionalities accessible only by the administrator
s that are listed in the RASD document.
\end_layout

\begin_layout Subsubsection
Payment manager
\end_layout

\begin_layout Standard
This component uses external API of the accepted payment service.
 It should be used not only for carry out the payments, but also to verify
 during the registration of a user that the provided payment informations
 are correct.
\end_layout

\begin_layout Subsubsection
Notification manager
\end_layout

\begin_layout Standard
Notification manager is used to send notifications to users (when their
 reserved car changes status), and to operator (when the system detects
 that an intervention on a car is needed, or a user make a communication).
 
\end_layout

\begin_layout Subsubsection
Car listener 
\end_layout

\begin_layout Standard
This is a subcomponent of the ride component, that is instantiated for a
 ride when the car is successfully unlocked.
 After the unlock of a car, probably the engine will be turned on.
 This component fulfil the problem of getting the engine ignition time,
 in order to calculate the correct ride cost.
 The runtime flow is explained with a sequence diagram in the section Runtime
 view.
 
\end_layout

\begin_layout Subsection
Deployment view
\end_layout

\begin_layout Standard
The deployment diagram shows the hardware of the system and the software
 that it's installed on it.
\begin_inset Newline newline
\end_inset

In this diagram there is the Mobile Application installed on Mobile Phone
 of the user.
\begin_inset Newline newline
\end_inset

The browser runs on user/operator/admin PC.
\begin_inset Newline newline
\end_inset

The Application Server and the Web Server are on different Nodes and on
 different environment.
 In this way they are totally decoupled and it's ensured the scalability
 of the system.
 The DBMS runs on a different node in order to not overload a node with
 a huge load.
\begin_inset Newline newline
\end_inset

If the need of scalability becomes more important for the system there could
 be more application server on different nodes with a load balancer before
 them.
 This is compatible with a cloud approach.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename DD Images/Diagrams/Deployment Diagram.png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment view
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Diagrams/Runtime - Unlock Car.png
	lyxscale 30
	width 80page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unlock Car
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component interface
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns
\end_layout

\begin_layout Subsubsection
Tiers
\end_layout

\begin_layout Standard
The system will be divided into 5 tiers:
\end_layout

\begin_layout Enumerate
Database Server 
\end_layout

\begin_layout Enumerate
Application Server
\end_layout

\begin_layout Enumerate
Web Server
\end_layout

\begin_layout Enumerate
Mobile Application
\end_layout

\begin_layout Enumerate
Car
\end_layout

\begin_layout Standard
Note that here the car is considered as a tier but actually is a blackbox
 capable of receive request from our system and capable to make request
 and call some interfaces provided by components of the system
\end_layout

\begin_layout Subsubsection
Layers
\end_layout

\begin_layout Standard
As said before the system will be divided into 3 Layers:
\end_layout

\begin_layout Itemize
Presentation Layer: it's distributed on the mobile application or on the
 Web Server.
\end_layout

\begin_layout Itemize
Business Layer: it's on the Application Server.
\end_layout

\begin_layout Itemize
Data Layer: it's on the Database Server.
\end_layout

\begin_layout Subsubsection
Protocols
\end_layout

\begin_layout Standard
In this section is described how different tier communicate with each other
 and how they exchange data.
\end_layout

\begin_layout Subsubsection*
JDBC
\end_layout

\begin_layout Standard
Used by the Application Server to communicate with the database server.
 JDBC API is the standard for database-independent connectivity between
 the Java programming language and a wide range of databases SQL databases
 and other tabular data sources.
 The JDBC API provides a call-level API for SQL-based database access.
\end_layout

\begin_layout Subsubsection*
RESTful API
\end_layout

\begin_layout Standard
Used by both Mobile Application and Web Application to access the services
 provided by Application Server component.
\end_layout

\begin_layout Subsubsection
Design Patterns
\end_layout

\begin_layout Subsubsection*
Client-Server
\end_layout

\begin_layout Subsubsection*
Monolithic
\end_layout

\begin_layout Subsubsection*
Proxy
\end_layout

\begin_layout Subsubsection*
Observer
\end_layout

\end_body
\end_document
