#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Architectural design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Architectures/Arch Overview.png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
High level architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
High level component and their interaction
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Diagrams/High Level component.png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
High level component diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component view
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename DD Images/Diagrams/Component diagram (detailed).png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
More detailed component diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Car proxy component
\end_layout

\begin_layout Standard
Car proxy is the abstraction of cars in the server.
 It must be invoked by other internal subsystems that need information about
 cars physical status (real time informations), like position, battery life
 etc.
 This component absolutely doesn't care about information related to reservation
s or rides.
 
\begin_inset Newline newline
\end_inset

The main purpose of this component is to request cars using their API, but
 its implementations should also guarantee that the systems working on cars
 don't have to support high amount of parallel request.
 In order to do that, car proxy will use the database, storing a physical
 characteristic related to the timestamp of the API call that has provided
 that information.
 When a request arrives, car proxy decides which data should be provided:
 the one got through the API call to the car, or the one stored in the database.
 If the stored data are sufficiently recent then they can be provided, otherwise
 it is needed to make the request.
\begin_inset Newline newline
\end_inset

As it can be seen in the diagram, this component has a considerable fan-in,
 it could be necessary in future to make it scalable.
\end_layout

\begin_layout Subsubsection
Car monitoring component
\end_layout

\begin_layout Standard
This component is substantially a daemon.
 It periodically asks to the car proxy component the informations that operators
 need to do car maintenance.
 If a damage has been detected, the notification component should be called,
 in order to communicate it to an operator.
\end_layout

\begin_layout Subsubsection
Ride manager
\end_layout

\begin_layout Standard
Ride manager is the component that takes care abut the data in the server
 corresponding to rides in the real world.
 Furthermore, when a ride is set to pause, it use the car proxy component
 to lock or unlock the car.
 
\end_layout

\begin_layout Subsubsection
Reservation manager
\end_layout

\begin_layout Standard
This component manages users reservation request, setting the status of
 a car from available to reserved and vice versa.
 It should also take care about reservation expiration, resetting the car
 state from reserved to available, and taxing the user through the component
 payment manager.
\end_layout

\begin_layout Subsubsection
Registration manager
\end_layout

\begin_layout Standard
This component accepts request from guest of joining the Power Enjoy service.
 It checks if the guest has a valid drive license and adds it to the users.
 It also verifies the validity of the payment informations received by the
 guest using the services provided by the payment manager component.
\end_layout

\begin_layout Subsubsection
Profile manager
\end_layout

\begin_layout Standard
This component reply to users that want to see their past utilization of
 the power enjoy services.
\end_layout

\begin_layout Subsubsection
Customer messages handler
\end_layout

\begin_layout Standard
This component receives messages about users regarding malfunctions of cars,
 and use the notification manager to notify the operator that should take
 care about that.
\end_layout

\begin_layout Subsubsection
Authentication manager
\end_layout

\begin_layout Standard
The authentication manager the component that manages the login of user,
 operator, and administrator, and administrates session.
\end_layout

\begin_layout Subsubsection
Car search engine
\end_layout

\begin_layout Standard
This component interrogates the car proxy component and get cars position,
 performing the two type of car research.
\end_layout

\begin_layout Subsubsection
Car manager 
\end_layout

\begin_layout Standard
The car manager component can be used by operators to change car status
 in the server.
 For instance, if an operator is going to work on a car, it should use this
 component to switch the car status to 
\begin_inset Quotes eld
\end_inset

under maintenance
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Administrator functionality provider
\end_layout

\begin_layout Standard
This component provides the functionalities accessible only by the administrator
s that are listed in the RASD document.
\end_layout

\begin_layout Subsubsection
Payment manager
\end_layout

\begin_layout Standard
This component uses external API of the accepted payment service.
 It should be used not only for carry out the payments, but also to verify
 during the registration of a user that the provided payment informations
 are correct.
\end_layout

\begin_layout Subsubsection
Notification manager
\end_layout

\begin_layout Standard
Notification manager is used to send notifications to users (when their
 reserved car changes status), and to operator (when the system detects
 that an intervention on a car is needed, or a user make a communication).
 
\end_layout

\begin_layout Subsection
Data model
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Class diagram of the data model
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Deployment view
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename DD Images/Diagrams/Deployment Diagram.png
	lyxscale 30
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment view
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Subsection
Component interface
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns
\end_layout

\end_body
\end_document
